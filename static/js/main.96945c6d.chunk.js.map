{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/AppFeedback/App.styled.jsx","components/AppFeedback/App.jsx","index.js"],"names":["Title","styled","h1","Section","children","title","Wrapper","div","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","toUpperCase","slice","Wrap","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","AppWrap","App","state","e","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","num","countPositiveFeedbackPercentage","Math","round","Number","isNaN","this","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAEaA,EAAQC,IAAOC,GAAV,wE,OCCH,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC1C,OACE,oCACE,cAACL,EAAD,UAAQK,IACPD,KCLA,I,EAAME,EAAUL,IAAOM,IAAV,2EAKPC,EAASP,IAAOQ,OAAV,wYCJJ,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,cAACN,EAAD,UACGK,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACN,EAAD,CAEEO,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,EAAO,GAAGI,cAAgBJ,EAAOK,MAAM,IALnCL,QCNR,I,EAAMM,EAAOnB,IAAOM,IAAV,wTCCF,SAASc,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,eAACN,EAAD,WACE,uCAAUE,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,UCdS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,ICDP,IAAMC,EAAU5B,IAAOM,IAAV,kHCOCuB,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPZ,gBAAkB,SAAAoB,GAChB,IAAMhB,EAAOgB,EAAEC,OAAOjB,KACtB,EAAKkB,UAAS,SAAAC,GAAS,sBAAQnB,EAAOmB,EAAUnB,GAAQ,O,EAG1DoB,mBAAqB,WAEnB,OADcC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,M,EAIrEC,gCAAkC,WAChC,IAAMhB,EAAqBiB,KAAKC,MAC7B,EAAKb,MAAMT,KAAO,EAAKc,qBAAwB,KAGlD,OAAOS,OAAOC,MAAMpB,GAAsB,EAAIA,G,4CAGhD,WACE,MAA+BqB,KAAKhB,MAA5BT,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBb,EAAU0B,OAAOW,KAAKD,KAAKhB,OACjC,OACE,eAACF,EAAD,WACE,cAAC1B,EAAD,CAASE,MAAM,wBAAf,SACE,cAACK,EAAD,CACEC,QAASA,EACTC,gBAAiBmC,KAAKnC,oBAGzBmC,KAAKX,qBACJ,cAACjC,EAAD,CAASE,MAAM,aAAf,SACE,cAACgB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKX,qBACZV,mBAAoBqB,KAAKL,sCAI7B,cAACf,EAAD,CAAcC,QAAQ,6B,GA/CCqB,aCJjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.96945c6d.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 32px;\r\n  margin-bottom: 30px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Title } from './Section.styled';\r\n\r\nexport default function Section({ children, title }) {\r\n  return (\r\n    <section>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  cildren: PropTypes.node,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrapper = styled.div`\r\n  margin-bottom: 30px;\r\n  padding-left: 30px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 2px 10px;\r\n  border: 1px solid #c9c1c1;\r\n  border-radius: 8px;\r\n  font-style: normal;\r\n  font-weight: 700;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  letter-spacing: 0.03em;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  cursor: pointer;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 15px;\r\n  }\r\n  &:hover {\r\n    background-color: #66bdf0;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Wrapper, Button } from './FeedbackOptions.styled';\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <Wrapper>\r\n      {options.map(option => (\r\n        <Button\r\n          key={option}\r\n          type=\"button\"\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option[0].toUpperCase() + option.slice(1)}\r\n        </Button>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & h2 {\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  & p {\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n    letter-spacing: 0.03em;\r\n  }\r\n  & p:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Wrap } from './Statistics.styled';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <Wrap>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <h2>{message}</h2>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const AppWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 600px;\r\n  margin: 40px auto 0;\r\n`;\r\n","import { Component } from 'react';\n\nimport Section from '../Section';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Statistics from '../Statistics';\nimport Notification from '../Notification';\n\nimport { AppWrap } from './App.styled';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = e => {\n    const name = e.target.name;\n    this.setState(prevState => ({ [name]: prevState[name] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce((acc, num) => acc + num);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positivePercentage = Math.round(\n      (this.state.good / this.countTotalFeedback()) * 100,\n    );\n\n    return Number.isNaN(positivePercentage) ? 0 : positivePercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    return (\n      <AppWrap>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </AppWrap>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/AppFeedback';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}